<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/build.gradle">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/build.gradle" />
              <option name="originalContent" value="plugins {&#10;    id 'com.android.application'&#10;    id 'org.jetbrains.kotlin.android'&#10;    id(&quot;de.mannodermaus.android-junit5&quot;) version &quot;1.10.2.0&quot;&#10;    id 'jacoco'&#10;}&#10;apply plugin: 'kotlin-kapt'&#10;apply plugin: 'dagger.hilt.android.plugin'&#10;// 一時的にGoogle Servicesを無効化（google-services.jsonファイルが必要）&#10;// apply plugin: 'com.google.gms.google-services'&#10;&#10;// アプリのバージョンをversion.propertiesから取得&#10;def versionProps = new Properties()&#10;versionProps.load(project.rootProject.file('version.properties').newDataInputStream())&#10;def majorVersion = versionProps.getProperty('version.major')&#10;def minorVersion = versionProps.getProperty('version.minor')&#10;// パッチバージョンはパラメータが与えられている場合はそちらを優先し、無い場合はversion.propertiesから取得する&#10;def patchVersion = project.hasProperty('patchVersion') ? project.getProperty('patchVersion') : versionProps.getProperty('version.patch')&#10;&#10;android {&#10;    signingConfigs {&#10;        release {&#10;            def properties = new Properties()&#10;            properties.load(project.rootProject.file(&quot;local.properties&quot;).newDataInputStream())&#10;            storeFile file(properties.getProperty(&quot;keystore.file&quot;))&#10;            storePassword properties.getProperty(&quot;keystore.storepwd&quot;)&#10;            keyAlias 'key0'&#10;            keyPassword properties.getProperty(&quot;keystore.keypwd&quot;)&#10;        }&#10;    }&#10;&#10;    compileSdk 36&#10;&#10;    defaultConfig {&#10;        applicationId &quot;net.wackwack.pic_card_memory&quot;&#10;        minSdk 24&#10;        targetSdk 36&#10;        versionCode 7&#10;        versionName &quot;${majorVersion}.${minorVersion}.${patchVersion}&quot;&#10;        testInstrumentationRunner &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;        archivesBaseName = &quot;app-${defaultConfig.versionName}&quot;&#10;    }&#10;&#10;    lint {&#10;        baseline file(&quot;lint-baseline.xml&quot;)&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            minifyEnabled true&#10;            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'&#10;            signingConfig signingConfigs.release&#10;        }&#10;    }&#10;    compileOptions {&#10;        sourceCompatibility JavaVersion.VERSION_17&#10;        targetCompatibility JavaVersion.VERSION_17&#10;    }&#10;    kotlinOptions {&#10;        jvmTarget = '17'&#10;    }&#10;    buildFeatures {&#10;        viewBinding true&#10;        dataBinding true&#10;    }&#10;    namespace 'net.wackwack.pic_card_memory'&#10;&#10;&#10;    testOptions {&#10;        unitTests.all {&#10;            jvmArgs '--add-opens', 'java.base/java.lang=ALL-UNNAMED'&#10;            jvmArgs '--add-opens', 'java.base/java.util=ALL-UNNAMED'&#10;        }&#10;    }&#10;}&#10;&#10;&#10;dependencies {&#10;&#10;    implementation 'androidx.core:core-ktx:1.15.0'&#10;    implementation 'androidx.appcompat:appcompat:1.7.0'&#10;    implementation 'com.google.android.material:material:1.12.0'&#10;    implementation 'androidx.constraintlayout:constraintlayout:2.2.0'&#10;    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.8.7'&#10;    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.8.7'&#10;    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.8.7'&#10;    implementation 'androidx.fragment:fragment-ktx:1.8.5'&#10;    implementation 'androidx.preference:preference:1.2.1'&#10;    implementation &quot;com.google.dagger:hilt-android:$hlt_version&quot;&#10;    implementation 'androidx.test.espresso:espresso-idling-resource:3.6.1'&#10;    implementation 'com.google.firebase:firebase-auth-ktx'&#10;    kapt &quot;com.google.dagger:hilt-android-compiler:$hlt_version&quot;&#10;    testImplementation 'org.junit.jupiter:junit-jupiter:5.11.3'&#10;    testImplementation &quot;org.mockito.kotlin:mockito-kotlin:5.4.0&quot;&#10;    testImplementation 'org.mockito:mockito-core:5.14.2'&#10;    testImplementation 'org.mockito:mockito-inline:5.2.0'&#10;    androidTestImplementation 'androidx.test.ext:junit:1.2.1'&#10;    androidTestImplementation 'androidx.test.espresso:espresso-core:3.6.1'&#10;    androidTestImplementation 'androidx.test:runner:1.6.2'&#10;    androidTestImplementation 'androidx.test:rules:1.6.1'&#10;    androidTestImplementation 'androidx.test.uiautomator:uiautomator:2.3.0'&#10;    implementation platform('com.google.firebase:firebase-bom:33.6.0')&#10;    implementation 'com.google.firebase:firebase-storage-ktx'&#10;}&#10;&#10;&#10;" />
              <option name="updatedContent" value="plugins {&#10;    id 'com.android.application'&#10;    id 'org.jetbrains.kotlin.android'&#10;    id(&quot;de.mannodermaus.android-junit5&quot;) version &quot;1.10.2.0&quot;&#10;    id 'jacoco'&#10;}&#10;apply plugin: 'kotlin-kapt'&#10;apply plugin: 'dagger.hilt.android.plugin'&#10;// 一時的にGoogle Servicesを無効化（google-services.jsonファイルが必要）&#10;// apply plugin: 'com.google.gms.google-services'&#10;&#10;// アプリのバージョンをversion.propertiesから取得&#10;def versionProps = new Properties()&#10;versionProps.load(project.rootProject.file('version.properties').newDataInputStream())&#10;def majorVersion = versionProps.getProperty('version.major')&#10;def minorVersion = versionProps.getProperty('version.minor')&#10;def patchVersion = project.hasProperty('patchVersion') ? project.getProperty('patchVersion') : versionProps.getProperty('version.patch')&#10;&#10;android {&#10;    signingConfigs {&#10;        release {&#10;            def properties = new Properties()&#10;            properties.load(project.rootProject.file(&quot;local.properties&quot;).newDataInputStream())&#10;            storeFile file(properties.getProperty(&quot;keystore.file&quot;))&#10;            storePassword properties.getProperty(&quot;keystore.storepwd&quot;)&#10;            keyAlias 'key0'&#10;            keyPassword properties.getProperty(&quot;keystore.keypwd&quot;)&#10;        }&#10;    }&#10;&#10;    compileSdk 36&#10;&#10;    defaultConfig {&#10;        applicationId &quot;net.wackwack.pic_card_memory&quot;&#10;        minSdk 24&#10;        targetSdk 36&#10;        versionCode 7&#10;        versionName &quot;${majorVersion}.${minorVersion}.${patchVersion}&quot;&#10;        testInstrumentationRunner &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;        archivesBaseName = &quot;app-${defaultConfig.versionName}&quot;&#10;    }&#10;&#10;    lint {&#10;        baseline file(&quot;lint-baseline.xml&quot;)&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            minifyEnabled true&#10;            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'&#10;            signingConfig signingConfigs.release&#10;        }&#10;    }&#10;&#10;    compileOptions {&#10;        sourceCompatibility JavaVersion.VERSION_17&#10;        targetCompatibility JavaVersion.VERSION_17&#10;    }&#10;&#10;    kotlinOptions {&#10;        jvmTarget = '17'&#10;    }&#10;&#10;    buildFeatures {&#10;        viewBinding true&#10;        dataBinding true&#10;    }&#10;&#10;    namespace 'net.wackwack.pic_card_memory'&#10;&#10;    testOptions {&#10;        unitTests.all {&#10;            jvmArgs '--add-opens', 'java.base/java.lang=ALL-UNNAMED'&#10;            jvmArgs '--add-opens', 'java.base/java.util=ALL-UNNAMED'&#10;        }&#10;    }&#10;}&#10;&#10;dependencies {&#10;    implementation 'androidx.core:core-ktx:1.15.0'&#10;    implementation 'androidx.appcompat:appcompat:1.7.0'&#10;    implementation 'com.google.android.material:material:1.12.0'&#10;    implementation 'androidx.constraintlayout:constraintlayout:2.2.0'&#10;    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.8.7'&#10;    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.8.7'&#10;    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.8.7'&#10;    implementation 'androidx.fragment:fragment-ktx:1.8.5'&#10;    implementation 'androidx.preference:preference:1.2.1'&#10;    implementation &quot;com.google.dagger:hilt-android:$hlt_version&quot;&#10;    implementation 'androidx.test.espresso:espresso-idling-resource:3.6.1'&#10;&#10;    // Firebase関連は一時的にコメントアウト（google-services.jsonが必要）&#10;    // implementation 'com.google.firebase:firebase-auth-ktx'&#10;    // implementation platform('com.google.firebase:firebase-bom:33.6.0')&#10;    // implementation 'com.google.firebase:firebase-storage-ktx'&#10;&#10;    kapt &quot;com.google.dagger:hilt-android-compiler:$hlt_version&quot;&#10;&#10;    testImplementation 'org.junit.jupiter:junit-jupiter:5.11.3'&#10;    testImplementation &quot;org.mockito.kotlin:mockito-kotlin:5.4.0&quot;&#10;    testImplementation 'org.mockito:mockito-core:5.14.2'&#10;    testImplementation 'org.mockito:mockito-inline:5.2.0'&#10;&#10;    androidTestImplementation 'androidx.test.ext:junit:1.2.1'&#10;    androidTestImplementation 'androidx.test.espresso:espresso-core:3.6.1'&#10;    androidTestImplementation 'androidx.test:runner:1.6.2'&#10;    androidTestImplementation 'androidx.test:rules:1.6.1'&#10;    androidTestImplementation 'androidx.test.uiautomator:uiautomator:2.3.0'&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/AndroidManifest.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/AndroidManifest.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;&#10;&#10;    &lt;uses-permission android:name=&quot;android.permission.READ_EXTERNAL_STORAGE&quot;&#10;        android:maxSdkVersion=&quot;32&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.READ_MEDIA_IMAGES&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;com.google.android.gms.permission.AD_ID&quot;/&gt;&#10;    &lt;application&#10;        android:allowBackup=&quot;true&quot;&#10;        android:icon=&quot;@mipmap/ic_launcher&quot;&#10;        android:label=&quot;@string/app_name&quot;&#10;        android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;&#10;        android:supportsRtl=&quot;true&quot;&#10;        android:theme=&quot;@style/Theme.CardShuffle.NoActionBar&quot;&#10;        android:name=&quot;.PicCardMemoryApplication&quot;&gt;&#10;        &lt;activity&#10;            android:name=&quot;net.wackwack.pic_card_memory.game.view.DetailImageActivity&quot;&#10;            android:exported=&quot;false&quot; /&gt;&#10;        &lt;activity&#10;            android:name=&quot;net.wackwack.pic_card_memory.menu.view.MainActivity&quot;&#10;            android:exported=&quot;true&quot;&gt;&#10;            &lt;intent-filter&gt;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#10;            &lt;/intent-filter&gt;&#10;        &lt;/activity&gt;&#10;        &lt;activity&#10;            android:name=&quot;net.wackwack.pic_card_memory.settings.view.SettingsActivity&quot;&#10;            android:configChanges=&quot;orientation|keyboardHidden|screenSize&quot;&#10;            android:exported=&quot;false&quot;/&gt;&#10;        &lt;activity&#10;            android:name=&quot;net.wackwack.pic_card_memory.game.view.GameActivity&quot;&#10;            android:exported=&quot;true&quot;&#10;            android:screenOrientation=&quot;portrait&quot;/&gt;&#10;    &lt;/application&gt;&#10;&#10;&lt;/manifest&gt;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;&#10;&#10;    &lt;uses-permission android:name=&quot;android.permission.READ_EXTERNAL_STORAGE&quot;&#10;        android:maxSdkVersion=&quot;32&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.READ_MEDIA_IMAGES&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;com.google.android.gms.permission.AD_ID&quot;/&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.POST_NOTIFICATIONS&quot; /&gt;&#10;&#10;    &lt;application&#10;        android:allowBackup=&quot;true&quot;&#10;        android:dataExtractionRules=&quot;@xml/data_extraction_rules&quot;&#10;        android:fullBackupContent=&quot;@xml/backup_rules&quot;&#10;        android:icon=&quot;@mipmap/ic_launcher&quot;&#10;        android:label=&quot;@string/app_name&quot;&#10;        android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;&#10;        android:supportsRtl=&quot;true&quot;&#10;        android:theme=&quot;@style/Theme.CardShuffle.NoActionBar&quot;&#10;        android:name=&quot;.PicCardMemoryApplication&quot;&#10;        android:enableOnBackInvokedCallback=&quot;true&quot;&#10;        android:localeConfig=&quot;@xml/locales_config&quot;&gt;&#10;&#10;        &lt;activity&#10;            android:name=&quot;net.wackwack.pic_card_memory.game.view.DetailImageActivity&quot;&#10;            android:exported=&quot;false&quot; /&gt;&#10;        &lt;activity&#10;            android:name=&quot;net.wackwack.pic_card_memory.menu.view.MainActivity&quot;&#10;            android:exported=&quot;true&quot;&gt;&#10;            &lt;intent-filter&gt;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#10;            &lt;/intent-filter&gt;&#10;        &lt;/activity&gt;&#10;        &lt;activity&#10;            android:name=&quot;net.wackwack.pic_card_memory.settings.view.SettingsActivity&quot;&#10;            android:configChanges=&quot;orientation|keyboardHidden|screenSize&quot;&#10;            android:exported=&quot;false&quot;/&gt;&#10;        &lt;activity&#10;            android:name=&quot;net.wackwack.pic_card_memory.game.view.GameActivity&quot;&#10;            android:exported=&quot;true&quot;&#10;            android:screenOrientation=&quot;portrait&quot;/&gt;&#10;    &lt;/application&gt;&#10;&#10;&lt;/manifest&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/net/wackwack/pic_card_memory/game/view/ElapsedTimeFragment.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/net/wackwack/pic_card_memory/game/view/ElapsedTimeFragment.kt" />
              <option name="originalContent" value="package net.wackwack.pic_card_memory.game.view&#10;&#10;import android.os.Bundle&#10;import androidx.fragment.app.Fragment&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import androidx.fragment.app.activityViewModels&#10;import androidx.lifecycle.lifecycleScope&#10;import net.wackwack.pic_card_memory.databinding.FragmentElapsedTimeBinding&#10;import net.wackwack.pic_card_memory.game.viewmodel.GameViewModel&#10;import net.wackwack.pic_card_memory.R&#10;&#10;class ElapsedTimeFragment : Fragment() {&#10;    private val viewModel by activityViewModels&lt;GameViewModel&gt;()&#10;    private lateinit var elapsedTimeBinding: FragmentElapsedTimeBinding&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;&#10;        lifecycleScope.launchWhenStarted {&#10;            viewModel.elapsedTime.collect {&#10;                elapsedTimeBinding.textElapsedTime.text = viewModel.elapsedTimeToString()&#10;            }&#10;        }&#10;    }&#10;&#10;    override fun onCreateView(&#10;        inflater: LayoutInflater, container: ViewGroup?,&#10;        savedInstanceState: Bundle?,&#10;    ): View {&#10;        elapsedTimeBinding = FragmentElapsedTimeBinding.bind(inflater.inflate(R.layout.fragment_elapsed_time, container, false))&#10;        return elapsedTimeBinding.root&#10;    }&#10;}" />
              <option name="updatedContent" value="package net.wackwack.pic_card_memory.game.view&#10;&#10;import android.os.Bundle&#10;import androidx.fragment.app.Fragment&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import androidx.fragment.app.activityViewModels&#10;import androidx.lifecycle.Lifecycle&#10;import androidx.lifecycle.lifecycleScope&#10;import androidx.lifecycle.repeatOnLifecycle&#10;import kotlinx.coroutines.launch&#10;import net.wackwack.pic_card_memory.databinding.FragmentElapsedTimeBinding&#10;import net.wackwack.pic_card_memory.game.viewmodel.GameViewModel&#10;import net.wackwack.pic_card_memory.R&#10;&#10;class ElapsedTimeFragment : Fragment() {&#10;    private val viewModel by activityViewModels&lt;GameViewModel&gt;()&#10;    private lateinit var elapsedTimeBinding: FragmentElapsedTimeBinding&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;&#10;        lifecycleScope.launch {&#10;            repeatOnLifecycle(Lifecycle.State.STARTED) {&#10;                viewModel.elapsedTime.collect {&#10;                    elapsedTimeBinding.textElapsedTime.text = viewModel.elapsedTimeToString()&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    override fun onCreateView(&#10;        inflater: LayoutInflater, container: ViewGroup?,&#10;        savedInstanceState: Bundle?,&#10;    ): View {&#10;        elapsedTimeBinding = FragmentElapsedTimeBinding.bind(inflater.inflate(R.layout.fragment_elapsed_time, container, false))&#10;        return elapsedTimeBinding.root&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/net/wackwack/pic_card_memory/settings/view/SettingsActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/net/wackwack/pic_card_memory/settings/view/SettingsActivity.kt" />
              <option name="originalContent" value="package net.wackwack.pic_card_memory.settings.view&#10;&#10;import androidx.appcompat.app.AppCompatActivity&#10;import android.app.Activity&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import android.util.Log&#10;import android.view.View&#10;import androidx.activity.result.contract.ActivityResultContracts&#10;import androidx.activity.viewModels&#10;import androidx.lifecycle.lifecycleScope&#10;import dagger.hilt.android.AndroidEntryPoint&#10;import net.wackwack.pic_card_memory.databinding.ActivitySettingsBinding&#10;import net.wackwack.pic_card_memory.settings.model.NumOfCard&#10;import net.wackwack.pic_card_memory.settings.viewmodel.CommandSettings&#10;import net.wackwack.pic_card_memory.settings.viewmodel.SettingsViewModel&#10;import net.wackwack.pic_card_memory.settings.model.ImagePathType&#10;&#10;@AndroidEntryPoint&#10;class SettingsActivity : AppCompatActivity() {&#10;    private val viewModel by viewModels&lt;SettingsViewModel&gt;()&#10;    private lateinit var dataBinding: ActivitySettingsBinding&#10;&#10;    private val launcher =&#10;        registerForActivityResult(&#10;            ActivityResultContracts.StartActivityForResult()) { result-&gt;&#10;                Log.d(javaClass.simpleName, result.data?.data.toString())&#10;                if(result.resultCode == Activity.RESULT_OK) {&#10;                    //Configに登録&#10;                    result.data?.data?.also { uri -&gt;&#10;                        contentResolver.takePersistableUriPermission(&#10;                            uri,&#10;                            Intent.FLAG_GRANT_READ_URI_PERMISSION or Intent.FLAG_GRANT_WRITE_URI_PERMISSION&#10;                        )&#10;                        viewModel.updateImagePathType(ImagePathType.SPECIFIED, uri.toString())&#10;                    }?: run {&#10;                        viewModel.updateImagePathType(ImagePathType.EXTERNAL, &quot;&quot;)&#10;                    }&#10;                } else {&#10;                    // 今のConfigが無ければSDカードに設定&#10;                    viewModel.updateImagePathType(ImagePathType.EXTERNAL, &quot;&quot;)&#10;                }&#10;            }&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        dataBinding = ActivitySettingsBinding.inflate(layoutInflater)&#10;        setContentView(dataBinding.root)&#10;&#10;&#10;        dataBinding.toggleNumOfCard12.setOnClickListener {&#10;            viewModel.updateNumOfCard(NumOfCard.TWELVE)&#10;        }&#10;        dataBinding.toggleNumOfCard20.setOnClickListener {&#10;            viewModel.updateNumOfCard(NumOfCard.TWENTY)&#10;        }&#10;        dataBinding.toggleNumOfCard30.setOnClickListener {&#10;            viewModel.updateNumOfCard(NumOfCard.THIRTY)&#10;        }&#10;        dataBinding.radioSDCard.setOnClickListener {&#10;            viewModel.updateImagePathType(ImagePathType.EXTERNAL, &quot;&quot;)&#10;        }&#10;        dataBinding.radioSpecifyDirectory.setOnClickListener {&#10;            val intent = Intent(Intent.ACTION_OPEN_DOCUMENT_TREE)&#10;            launcher.launch(intent)&#10;        }&#10;&#10;        lifecycleScope.launchWhenStarted {&#10;            viewModel.message.collect { command-&gt;&#10;                Log.d(javaClass.simpleName, &quot;Receive Message&quot;)&#10;                when(command) {&#10;                    is CommandSettings.UpdateNumOfCard -&gt; {&#10;                        dataBinding.toggleNumOfCard12.isChecked = command.numOfCard == NumOfCard.TWELVE&#10;                        dataBinding.toggleNumOfCard12.isClickable = command.numOfCard != NumOfCard.TWELVE&#10;                        dataBinding.toggleNumOfCard20.isChecked = command.numOfCard == NumOfCard.TWENTY&#10;                        dataBinding.toggleNumOfCard20.isClickable = command.numOfCard != NumOfCard.TWENTY&#10;                        dataBinding.toggleNumOfCard30.isChecked = command.numOfCard == NumOfCard.THIRTY&#10;                        dataBinding.toggleNumOfCard30.isClickable = command.numOfCard != NumOfCard.THIRTY&#10;                    }&#10;                    is CommandSettings.UpdateImagePathType -&gt; {&#10;                        when(command.pathType) {&#10;                            ImagePathType.EXTERNAL -&gt; {&#10;                                dataBinding.radioSDCard.isChecked = true&#10;                                dataBinding.textSpecifiedDirectoryPath.text = &quot;&quot;&#10;                                dataBinding.textSpecifiedDirectoryPath.visibility = View.INVISIBLE&#10;                            }&#10;                            ImagePathType.SPECIFIED -&gt; {&#10;                                dataBinding.radioSpecifyDirectory.isChecked = true&#10;                                dataBinding.textSpecifiedDirectoryPath.text = command.path&#10;                                dataBinding.textSpecifiedDirectoryPath.visibility = View.VISIBLE&#10;                            }&#10;                        }&#10;                    }&#10;                    else -&gt; {&#10;                        Log.w(javaClass.simpleName, &quot;Unexpected message: $command&quot;)&#10;                    }&#10;                }&#10;            }&#10;        }&#10;        viewModel.init()&#10;    }&#10;}" />
              <option name="updatedContent" value="package net.wackwack.pic_card_memory.settings.view&#10;&#10;import androidx.appcompat.app.AppCompatActivity&#10;import android.app.Activity&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import android.util.Log&#10;import android.view.View&#10;import androidx.activity.result.contract.ActivityResultContracts&#10;import androidx.activity.viewModels&#10;import androidx.lifecycle.Lifecycle&#10;import androidx.lifecycle.lifecycleScope&#10;import androidx.lifecycle.repeatOnLifecycle&#10;import dagger.hilt.android.AndroidEntryPoint&#10;import kotlinx.coroutines.launch&#10;import net.wackwack.pic_card_memory.databinding.ActivitySettingsBinding&#10;import net.wackwack.pic_card_memory.settings.model.NumOfCard&#10;import net.wackwack.pic_card_memory.settings.viewmodel.CommandSettings&#10;import net.wackwack.pic_card_memory.settings.viewmodel.SettingsViewModel&#10;import net.wackwack.pic_card_memory.settings.model.ImagePathType&#10;&#10;@AndroidEntryPoint&#10;class SettingsActivity : AppCompatActivity() {&#10;    private val viewModel by viewModels&lt;SettingsViewModel&gt;()&#10;    private lateinit var dataBinding: ActivitySettingsBinding&#10;&#10;    private val launcher =&#10;        registerForActivityResult(&#10;            ActivityResultContracts.StartActivityForResult()) { result-&gt;&#10;                Log.d(javaClass.simpleName, result.data?.data.toString())&#10;                if(result.resultCode == Activity.RESULT_OK) {&#10;                    //Configに登録&#10;                    result.data?.data?.also { uri -&gt;&#10;                        contentResolver.takePersistableUriPermission(&#10;                            uri,&#10;                            Intent.FLAG_GRANT_READ_URI_PERMISSION or Intent.FLAG_GRANT_WRITE_URI_PERMISSION&#10;                        )&#10;                        viewModel.updateImagePathType(ImagePathType.SPECIFIED, uri.toString())&#10;                    }?: run {&#10;                        viewModel.updateImagePathType(ImagePathType.EXTERNAL, &quot;&quot;)&#10;                    }&#10;                } else {&#10;                    // 今のConfigが無ければSDカードに設定&#10;                    viewModel.updateImagePathType(ImagePathType.EXTERNAL, &quot;&quot;)&#10;                }&#10;            }&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        dataBinding = ActivitySettingsBinding.inflate(layoutInflater)&#10;        setContentView(dataBinding.root)&#10;&#10;&#10;        dataBinding.toggleNumOfCard12.setOnClickListener {&#10;            viewModel.updateNumOfCard(NumOfCard.TWELVE)&#10;        }&#10;        dataBinding.toggleNumOfCard20.setOnClickListener {&#10;            viewModel.updateNumOfCard(NumOfCard.TWENTY)&#10;        }&#10;        dataBinding.toggleNumOfCard30.setOnClickListener {&#10;            viewModel.updateNumOfCard(NumOfCard.THIRTY)&#10;        }&#10;        dataBinding.radioSDCard.setOnClickListener {&#10;            viewModel.updateImagePathType(ImagePathType.EXTERNAL, &quot;&quot;)&#10;        }&#10;        dataBinding.radioSpecifyDirectory.setOnClickListener {&#10;            val intent = Intent(Intent.ACTION_OPEN_DOCUMENT_TREE)&#10;            launcher.launch(intent)&#10;        }&#10;&#10;        lifecycleScope.launch {&#10;            repeatOnLifecycle(Lifecycle.State.STARTED) {&#10;                viewModel.message.collect { command-&gt;&#10;                    Log.d(javaClass.simpleName, &quot;Receive Message&quot;)&#10;                    when(command) {&#10;                        is CommandSettings.UpdateNumOfCard -&gt; {&#10;                            dataBinding.toggleNumOfCard12.isChecked = command.numOfCard == NumOfCard.TWELVE&#10;                            dataBinding.toggleNumOfCard12.isClickable = command.numOfCard != NumOfCard.TWELVE&#10;                            dataBinding.toggleNumOfCard20.isChecked = command.numOfCard == NumOfCard.TWENTY&#10;                            dataBinding.toggleNumOfCard20.isClickable = command.numOfCard != NumOfCard.TWENTY&#10;                            dataBinding.toggleNumOfCard30.isChecked = command.numOfCard == NumOfCard.THIRTY&#10;                            dataBinding.toggleNumOfCard30.isClickable = command.numOfCard != NumOfCard.THIRTY&#10;                        }&#10;                        is CommandSettings.UpdateImagePathType -&gt; {&#10;                            when(command.pathType) {&#10;                                ImagePathType.EXTERNAL -&gt; {&#10;                                    dataBinding.radioSDCard.isChecked = true&#10;                                    dataBinding.textSpecifiedDirectoryPath.text = &quot;&quot;&#10;                                    dataBinding.textSpecifiedDirectoryPath.visibility = View.INVISIBLE&#10;                                }&#10;                                ImagePathType.SPECIFIED -&gt; {&#10;                                    dataBinding.radioSpecifyDirectory.isChecked = true&#10;                                    dataBinding.textSpecifiedDirectoryPath.text = command.path&#10;                                    dataBinding.textSpecifiedDirectoryPath.visibility = View.VISIBLE&#10;                                }&#10;                            }&#10;                        }&#10;                        else -&gt; {&#10;                            Log.w(javaClass.simpleName, &quot;Unexpected message: $command&quot;)&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;        viewModel.init()&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/xml/backup_rules.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/xml/backup_rules.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;full-backup-content&gt;&#10;    &lt;!-- &#10;    Refer to the Android documentation for Auto Backup for Apps to learn more:&#10;    https://developer.android.com/guide/topics/data/autobackup&#10;    --&gt;&#10;&lt;/full-backup-content&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/xml/data_extraction_rules.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/xml/data_extraction_rules.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;data-extraction-rules&gt;&#10;    &lt;cloud-backup&gt;&#10;        &lt;!-- TODO: Use &lt;include&gt; and &lt;exclude&gt; to control what is backed up.&#10;        &lt;include .../&gt;&#10;        &lt;exclude .../&gt;&#10;        --&gt;&#10;    &lt;/cloud-backup&gt;&#10;    &lt;!--&#10;    &lt;device-transfer&gt;&#10;        &lt;include .../&gt;&#10;        &lt;exclude .../&gt;&#10;    &lt;/device-transfer&gt;&#10;    --&gt;&#10;&lt;/data-extraction-rules&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/xml/locales_config.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/xml/locales_config.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;locale-config xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;&#10;    &lt;locale android:name=&quot;ja&quot; /&gt;&#10;    &lt;locale android:name=&quot;en&quot; /&gt;&#10;&lt;/locale-config&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/build.gradle">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/build.gradle" />
              <option name="originalContent" value="// Top-level build file where you can add configuration options common to all sub-projects/modules.&#10;buildscript {&#10;    ext.hlt_version= '2.46.1'&#10;    dependencies {&#10;        classpath &quot;com.google.dagger:hilt-android-gradle-plugin:$hlt_version&quot;&#10;        classpath 'com.google.gms:google-services:4.4.0'&#10;    }&#10;}&#10;plugins {&#10;    id 'com.android.application' version '8.1.1' apply false&#10;    id 'com.android.library' version '8.1.1' apply false&#10;    id 'org.jetbrains.kotlin.android' version '1.8.20' apply false&#10;}&#10;&#10;tasks.register('clean', Delete) {&#10;    delete rootProject.buildDir&#10;}" />
              <option name="updatedContent" value="// Top-level build file where you can add configuration options common to all sub-projects/modules.&#10;buildscript {&#10;    ext.hlt_version= '2.53'&#10;    dependencies {&#10;        classpath &quot;com.google.dagger:hilt-android-gradle-plugin:$hlt_version&quot;&#10;        classpath 'com.google.gms:google-services:4.4.2'&#10;    }&#10;}&#10;plugins {&#10;    id 'com.android.application' version '8.9.0-alpha01' apply false&#10;    id 'com.android.library' version '8.9.0-alpha01' apply false&#10;    id 'org.jetbrains.kotlin.android' version '2.1.0' apply false&#10;}&#10;&#10;tasks.register('clean', Delete) {&#10;    delete rootProject.buildDir&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/gradle.properties">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/gradle.properties" />
              <option name="originalContent" value="# Project-wide Gradle settings.&#10;# IDE (e.g. Android Studio) users:&#10;# Gradle settings configured through the IDE *will override*&#10;# any settings specified in this file.&#10;# For more details on how to configure your build environment visit&#10;# http://www.gradle.org/docs/current/userguide/build_environment.html&#10;# Specifies the JVM arguments used for the daemon process.&#10;# The setting is particularly useful for tweaking memory settings.&#10;kapt.use.worker.api=false&#10;kotlin.jupyter.add.scanner=false&#10;org.gradle.jvmargs=-Xmx2048m -Dfile.encoding=UTF-8&#10;# When configured, Gradle will run in incubating parallel mode.&#10;# This option should only be used with decoupled projects. More details, visit&#10;# http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects&#10;# org.gradle.parallel=true&#10;# AndroidX package structure to make it clearer which packages are bundled with the&#10;# Android operating system, and which are packaged with your app&quot;s APK&#10;# https://developer.android.com/topic/libraries/support-library/androidx-rn&#10;android.useAndroidX=true&#10;# Kotlin code style for this project: &quot;official&quot; or &quot;obsolete&quot;:&#10;kotlin.code.style=official&#10;# Enables namespacing of each library's R class so that its R class includes only the&#10;# resources declared in the library itself and none from the library's dependencies,&#10;# thereby reducing the size of the R class for that library&#10;android.nonTransitiveRClass=true&#10;android.defaults.buildfeatures.buildconfig=true&#10;android.nonFinalResIds=false" />
              <option name="updatedContent" value="# Project-wide Gradle settings.&#10;# IDE (e.g. Android Studio) users:&#10;# Gradle settings configured through the IDE *will override*&#10;# any settings specified in this file.&#10;# For more details on how to configure your build environment visit&#10;# http://www.gradle.org/docs/current/userguide/build_environment.html&#10;# Specifies the JVM arguments used for the daemon process.&#10;# The setting is particularly useful for tweaking memory settings.&#10;kapt.use.worker.api=false&#10;kotlin.jupyter.add.scanner=false&#10;org.gradle.jvmargs=-Xmx2048m -Dfile.encoding=UTF-8&#10;# When configured, Gradle will run in incubating parallel mode.&#10;# This option should only be used with decoupled projects. More details, visit&#10;# http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects&#10;# org.gradle.parallel=true&#10;# AndroidX package structure to make it clearer which packages are bundled with the&#10;# Android operating system, and which are packaged with your app&quot;s APK&#10;# https://developer.android.com/topic/libraries/support-library/androidx-rn&#10;android.useAndroidX=true&#10;# Kotlin code style for this project: &quot;official&quot; or &quot;obsolete&quot;:&#10;kotlin.code.style=official&#10;&#10;# Android 16 compatibility settings&#10;android.suppressUnsupportedCompileSdk=36&#10;android.defaults.buildfeatures.buildconfig=false&#10;android.nonTransitiveRClass=true&#10;android.nonFinalResIds=false" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/gradle/wrapper/gradle-wrapper.properties">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/gradle/wrapper/gradle-wrapper.properties" />
              <option name="originalContent" value="#Sat Apr 23 21:34:00 JST 2022&#10;distributionBase=GRADLE_USER_HOME&#10;distributionUrl=https\://services.gradle.org/distributions/gradle-8.0-bin.zip&#10;distributionPath=wrapper/dists&#10;zipStorePath=wrapper/dists&#10;zipStoreBase=GRADLE_USER_HOME" />
              <option name="updatedContent" value="#Sat Apr 23 21:34:00 JST 2022&#10;distributionBase=GRADLE_USER_HOME&#10;distributionUrl=https\://services.gradle.org/distributions/gradle-8.10.2-bin.zip&#10;distributionPath=wrapper/dists&#10;zipStorePath=wrapper/dists&#10;zipStoreBase=GRADLE_USER_HOME" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>